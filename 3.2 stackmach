
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define int long long
//int logs [100];
typedef struct Stack
{
    int cap;
    int top;
    int *data;
} Stack;
void init(Stack *s, int n)
{
    (*s).data = malloc(sizeof(int) * n);
    (*s).cap = n;
    (*s).top = 0;
}
void push(Stack *s, int x)
{
    if ((*s).cap == (*s).top)
        printf("stack overflow\n");
    else
    {
        (*s).data[(*s).top] = x;
        ++(*s).top;
    }
}
int pop(Stack *s)
{
    if ((*s).top > 0)
        --(*s).top;
    return (*s).data[(*s).top];
}
int max(int a, int b)
{
    if (a > b)
        return a;
    return b;
}
int min(int a, int b)
{
    if (a < b)
        return a;
    return b;
}

signed main()
{
    int n;
    scanf("%d", &n);
    Stack s;
    init(&s, n);
    int a, b, x;
    for (int i = 0; i < n; ++i)
    {
        char command [6];
        scanf("%s", &command);

        if (strcmp(command, "CONST") == 0)
        {
            scanf("%d", &x);
            push(&s, x);
        }
        else if (strcmp(command, "ADD") == 0)
        {
            a = pop(&s);
            b = pop(&s);
            push(&s, a + b);
        }
        else if (strcmp(command, "SUB") == 0)
        {
            a = pop(&s);
            b = pop(&s);
            push(&s, a - b);
        }
        else if (strcmp(command, "MUL") == 0)
        {
            a = pop(&s);
            b = pop(&s);
            push(&s, a * b);
        }
        else if (strcmp(command, "DIV") == 0)
        {
            a = pop(&s);
            b = pop(&s);
            push(&s, a / b);
        }
        else if (strcmp(command, "MAX") == 0)
        {
            a = pop(&s);
            b = pop(&s);
            push(&s, max(a, b));
        }
        else if (strcmp(command, "MAX") == 0)
        {
            a = pop(&s);
            b = pop(&s);
            push(&s, min(a, b));
        }
        else if (strcmp(command, "NEG") == 0)
        {
            a = pop(&s);
            push(&s, -a);
        }
        else if (strcmp(command, "DUP") == 0)
        {
            a = pop(&s);
            push(&s, a);
            push(&s, a);
        }
        else if (strcmp(command, "SWAP") == 0)
        {
            a = pop(&s);
            b = pop(&s);
            push(&s, a);
            push(&s, b);
        }
    }
}

