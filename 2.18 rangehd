

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define int long long
int inf = 2e9;
typedef struct Tree{
    int * a;
    int * t;
    int n;
    int pow;
} Tree;
int max (int x, int y)
{
    if (x >= y)
        return x;
    else
        return y;
}
Tree ch_size(int n)
{
    Tree D;
    int x = 1;
    while (x < n)
        x *= 2;
    D.a = calloc(x, sizeof(int));
    D.t = calloc(2 * x, sizeof(int));
    D.n = n;
    D.pow = x;
//    for (int i = 0; i < D.n; ++i)
//    {
//        printf("%lld ", D.a[i]);
//    }
    return D;
}
void build (int l, int r, int v, struct Tree D)
{

    if (l + 1 == r)
    {
        D.t[v] = D.a[l];
        return;
    }
    int m = (l + r) / 2;
    int left = 2 * v + 1;
    int right = 2 * v + 2;
    build(l, m, left, D);
    build(m, r, right, D);
    D.t[v] = (D.t[left] + D.t[right]);
}
int ask (int l, int r, int v, int askl, int askr, struct Tree D)
{
    if ((askl >= r) || (askr <= l))
        return 0;
    else if (l >= askl && r <= askr)
        return D.t[v];
    else
    {
        int m = (l + r) / 2;
        int left = 2 * v + 1;
        int right = 2 * v + 2;
        return (ask(l, m, left, askl, askr, D) + ask(m, r, right, askl, askr, D));
    }
}
void update (int l, int r, int v, int ind, int val, struct Tree D)
{
    if (l + 1 == r)
    {
        D.a[l] = val;
        D.t[v] = val;
        return;
    }
    int m = (l + r) / 2;
    int left = 2 * v + 1;
    int right = 2 * v + 2;
    if (ind < m)
        update(l, m, left, ind, val, D);
    else
        update(m, r, right, ind, val, D);
    D.t[v] = (D.t[left] + D.t[right]);
}
signed main()
{
    int n, m;
    char s[(int)1e6 + 1];
    scanf("%s", &s);
    n = strlen(s);
    Tree trees [26];
    for (int i = 0; i < 26; ++i)
        trees[i] = ch_size(n);
    for (int i = 0; i < 26; ++i)
    {
        for (int j = 0; j < trees[i].n; ++j)
        {
            if (s[j] - 'a' == i)
                trees[i].a[j] = 1;
            else
                trees[i].a[j] = 0;
        }
        build(0, trees[i].pow, 0, trees[i]);
    }
//    for (int i = 0; i < n; ++i)
//    {
//        printf("%d", trees[0].a[i]);
//    }
    scanf("%lld", &m);
    char type[4];
    for (int i = 0; i < m; ++i)
    {
        scanf("%s", &type);
        if (type[0] == 'H')
        {
            int askl, askr;
            scanf("%lld", &askl);
            scanf("%lld", &askr);
            ++askr;
            int odd = 0;
            for (int j = 0; j < 26; ++j)
            {
                int cur = ask(0, trees[j].pow, 0, askl, askr, trees[j]);
//                if (i == 0)
//                    printf("%d %c\n", cur, 'a' + j);
                if (cur % 2 == 1)
                    ++odd;
            }
            if (odd <= 1)
                printf("YES\n");
            else
                printf("NO\n");
        } else
        {
            int ind;
            scanf("%lld", &ind);
            char news[(int)1e6 + 1];
            scanf("%s", &news);
            for (int j = 0; j < strlen(news); ++j)
            {
                int old = s[ind + j] - 'a';
                int new = news[j] - 'a';
                update(0, trees[old].pow, 0, ind + j, new == old, trees[old]);
                update(0, trees[new].pow, 0, ind + j, 1, trees[new]);
            }
        }
    }
}
